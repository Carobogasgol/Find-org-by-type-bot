# —ç—Ç–æ —Ñ–∞–π–ª –¥–ª—è –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —Å —é–∑–µ—Ä–æ–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
import asyncio

from aiogram import Bot, types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, or_f
from aiogram.types import URLInputFile, InputMediaPhoto, FSInputFile  # –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Å—Å—ã–ª–∫–∏
from keyboards import reply
from config import TOKEN

from keyboards.reply import get_keyboard

bot = Bot(token=TOKEN)
user_private_router = Router()


# —Ç—É—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
@user_private_router.message(or_f(CommandStart(), F.text.lower() == '—Å—Ç–∞—Ä—Ç'))  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def start_cmd(message: types.Message):
    await message.answer(

        '''
–ü—Ä–∏–≤–µ—Ç, —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞:
        ''',

        reply_markup=get_keyboard(
            '–°—Ç–∞—Ä—Ç',
            '–û–ø–∏—Å–∞–Ω–∏–µ',
            '–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π üìç',
            placeholder='–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
            sizes=(2, )
        ),
    )


# await message.answer('–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏! –¢–∞–∫ —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞',
# reply_markup=reply.start_kb)


# —Ç—É—Ç –≤ Command –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã

# @user_private_router.message(or_f(Command('chmo'), F.text.lower() == '—á–º–æ'))
# async def menu_cmd(message: types.Message):
#     await message.reply(message.text)  # —ç—Ç–æ —ç—Ö–æ
#     await message.answer(
#         '''
# —ç—Ç–æ—Ç —à–µ–¥–µ–≤—Ä–æ–±–æ—Ç —Å–æ–∑–¥–∞–Ω —Ç—Ä–µ–º—è –≥–µ–Ω–∏—è–º–∏
# —Ç—ã chmo
#         ''',
#         reply_markup=types.ReplyKeyboardRemove()  # —É–±–∏—Ä–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#     )


# photo = 'https://krot.info/uploads/posts/2022-03/1647141781_68-krot-info-p-khonda-prikol-smeshnie-foto-73.jpg'
# —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —ç—Ç–æ —Ö–æ—Ä–æ—à–æ!

# media_group = [
#     InputMediaPhoto(media=FSInputFile(r'me.jpg')),
#     InputMediaPhoto(media=FSInputFile(r'andrew.jpg')),
#     InputMediaPhoto(media=FSInputFile('eliz.jpg'))
# ]


@user_private_router.message(or_f(Command('description'), F.text.lower() == '–æ–ø–∏—Å–∞–Ω–∏–µ'))
async def menu_disc(message: types.Message):
    await message.answer('''
–í–æ—Ç —Ç–µ–±–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:
                         
–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –≥–æ—Ä–æ–¥–æ–≤. 
–û–Ω —Ä–µ—à–∞–µ—Ç —Ç–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É, –∫–∞–∫ <i>"–Ω–µ –∑–Ω–∞—é, –∫—É–¥–∞ –ø–æ–π—Ç–∏"</i>. –í–∞–º —Ö–æ—á–µ—Ç—Å—è –ø–æ–µ—Å—Ç—å –≤–∫—É—Å–Ω–æ–π –ø–∏—Ü—Ü—ã, 
–Ω–æ –±–ª–∏–∂–∞–π—à–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è —É–∂–µ –Ω–∞–¥–æ–µ–ª–∞? –ó–Ω–∞–π—Ç–µ, <b>–º—ã</b> —Ä–µ—à–∏–º —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É! 
–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª–æ–∫–∞—Ü–∏–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–≤–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ "–ø–∏—Ü—Ü–∞" –∏ –±–∞—Ü! –í–∞–º —É–∂–µ –Ω–∞–º–µ—á–µ–Ω –º–∞—Ä—à—Ä—É—Ç, –≤–∞–º
–∏–∑–≤–µ—Å—Ç–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü–µ—Ä–∏–∏, –µ—ë —Ä–µ–π—Ç–∏–Ω–≥, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã. 
  
 –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!
 ''')



# @user_private_router.message(or_f(Command('location'), F.text.lower() == '–Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π..'))
# async def get_location(message: types.Message):
#     await message.answer('–í–æ—Ç –∏ —Ç–≤–æ—è –ª–æ–∫–∞—Ü–∏—è!')


# @user_private_router.message(or_f(Command('number'), F.text.lower() == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä'),
#                              F.content_type.in_('contact'))
# async def menu_kaif(message: types.Message):
#     await message.answer('–í–æ—Ç –∏ —Ç–≤–æ–π –Ω–æ–º–µ—Ä!')


# @user_private_router.message(F.text)
# async def menu_disc(message: types.Message):
#     await message.answer('—ç—Ç–æ –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä')


# async def geo_info(message: types.Location):
#     await message.answer('—ç—Ç–æ –ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä')
#     lat = message.location.latitude
#     lon = message.location.longitude
#     await message.answer(f'latitude: {lat}, longitude: {lon}')
#     await message.answer('–í–æ—Ç –∏ —Ç–≤–æ—è –ª–æ–∫–∞—Ü–∏—è!')


# @user_private_router.message(content_types=['location'])
# async def handle_location(message: types.Message):
    # # await sendLocation(latitude, longitude)
    # lat = message.location.latitude
    # lon = message.location.longitude
    # await message.answer(f 'latitude: {lat}, longitude: {lon}')


# –≤–æ—Ç —Ç–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞—é –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
# @user_private_router.message(F.contact)
# async def get_contact(message: types.Message):
#     await message.answer('<b>–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω</b>')  # –ö—Ä–∞—Å–∏–≤—ã–π —à—Ä–∏—Ñ—Ç
#     await message.answer(str(message.contact.phone_number))
